Https协议协议详解
=======================

.. contents:: Sections:
   :local:
   :depth: 2

什么是Https协议?
-----------------------
**HTTPS** (全称：Hyper Text Transfer Protocol over Secure Socket Layer)，是以安全为目标的HTTP通道，简单讲是HTTP的安全版,即HTTP下加入 ``SSL层`` ， ``HTTPS`` 的安全基础是 ``SSL`` 。

``HTTPS`` 是由 ``HTTP`` 协议 + ``SSL`` 协议构成,即：  ``HTTPS协议`` = ``https协议`` + ``ssl协议`` 


Http 协议的安全隐患
^^^^^^^^^^^^^^^^^^^^^
HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常 **不安全**
 
Https的诞生
^^^^^^^^^^^^^^^^^
为了保证这些隐私数据能加密传输，于是网景公司设计了 ``SSL（Secure Sockets Layer）`` 协议用于对HTTP协议传输的数据进行加密，从而就诞生了 ``HTTPS``

``https:URL`` 表明它使用了HTTP ，但 ``HTTPS`` 存在 **不同于** ``HTTP`` 的默认端口及一个加密/身份验证层（在HTTP与TCP之间）

HTTPS和HTTP的区别
^^^^^^^^^^^^^^^^^^^^^^

``HTTP协议`` 以 **明文方式** 发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此HTTP协议不适合传输一些敏感信息，比如信用 卡号、密码等

HTTPS和HTTP的区别主要为以下四点:

1. ``https协议`` 需要到 ``ca`` 申请证书，一般免费证书很少，需要交费
2. ``http`` 是超文本传输协议，信息是明文传输，``https`` 则是具有安全性的 ``ssl`` 加密传输协议
3. ``http`` 和 ``https`` 使用的是 **完全不同的连接方式** ，用的端口也不一样，前者是 ``80`` ，后者是 ``443``
4. ``http`` 的连接很简单，是 **无状态** 的；``HTTPS协议`` 是由 ``SSL+HTTP协议`` 构建的可进行加密传输、身份认证的网络协议，比 ``http协议`` 安全

HTTPS 保证安全可靠通信
""""""""""""""""""""""""
HTTPS 对比标准的HTTP协议的两大优势:

1. 它确保了用户访问的是正确的网站，这个网站是他原本打算访问的而不是一些假冒网站 (防止冒充风险pretending)
2. 它确保了web浏览器与web服务器之间通信的内容是加密的，因此入侵者不能得到原始的通信内容(防止窃听风险eavesdropping，第三方无法获知通信的内容)

https解决了什么问题
""""""""""""""""""""
1. 信任主机的问题
    采用 ``https的服务器`` 必须从 ``CA`` （Certificate Authority）申请一个用于证明服务器用途类型的证书。 **该证书只有用于对应的服务器的时候，客户端才信任此主机** (https协议是如何做到信任主机的？)

2. 通讯过程中的数据的泄密和被篡改


HTTPS的工作原理
-----------------------
HTTPS在 **传输数据之前** 需要客户端（浏览器）与服务端（网站）之间进行一次握手，在握手过程中将确立双方加密传输数据的密码信息

在 ``TLS/SSL`` 中使用了非对称加密，对称加密以及 ``HASH算法``

Https的握手过程(通信过程)
^^^^^^^^^^^^^^^^^^^^^^^^^

.. image:: https://cattail.me/assets/how-https-works/ssl_handshake_rsa.jpg
   :height: 600
   :width: 600

握手过程描述
  
1. [明文] 客户端发送随机数 ``client_random`` 和支持的加密方式列表
2. [明文] 服务器返回随机数 ``server_random`` ，选择的加密方式和服务器证书链
3. [RSA] 客户端验证服务器证书，使用证书中的公钥加密 ``premaster secret`` 发送给服务端
4. 服务端使用私钥解密 ``premaster secret``
5. 两端分别通过 ``client_random`` ，``server_random`` 和 ``premaster secret`` 生成 ``master secret`` ，用于对称加密后续通信内容

证书（Digital certificate）
------------------------------
数字证书的格式普遍采用的是X.509V3国际标准，一个标准的X.509数字证书包含以下一些内容

* 证书的版本信息；
* 证书的序列号，每个证书都有一个唯一的证书序列号；
* 证书所使用的签名算法；
* 证书的发行机构名称，命名规则一般采用X.500格式；
* 证书的有效期，通用的证书一般采用UTC时间格式，它的计时范围为1950-2049；
* 证书所有人的名称，命名规则一般采用X.500格式；
* 证书所有人的公钥；
* 证书发行者对证书的签名。

证书以 **链的形式组织** ，上级标识该证书的签发机构，验证证书的时候也是顺着这个链向上层层验证的，只有所有证书都是受信的，整个验证结果才是可信的。

根证书是如何验证的呢？

* 根证书是 **自信任** 的，在操作系统或者浏览其中都会默认一些受信任的 CA 机构根证书

CA（Certification authority）
----------------------------------
表示发布该证书的机构。

只有从发布者那里才能获得证书。

证书中通常会有发布者的签名用以保证有效性。

SSL
----------------------
SSL(Secure Sockets Layer 安全套接层),及其继任者传输层安全（Transport Layer Security，TLS）：为网络通信提供安全及数据完整性的一种安全协议


SSL提供的服务
^^^^^^^^^^^^^^^^^^
1. 认证用户和服务器，确保数据发送到正确的客户机和服务器；
2. 加密数据以防止数据中途被窃取；
3. 维护数据的完整性，确保数据在传输过程中不被改变。

SSL协议工作流程
^^^^^^^^^^^^^^^^^^
``SSL/TLS协议`` 的基本思路是采用 **公钥加密法** ，也就是说，客户端先向服务器端索要公钥，然后用公钥加密信息，服务器收到密文后，用自己的私钥解密


握手阶段的详细过程
"""""""""""""""""""

.. image:: http://image.beekka.com/blog/201402/bg2014020502.png
  :width: 400
  :height: 400

**握手阶段** 涉及四次通信,所有通信都是明文的

1. 客户端发出请求（ClientHello）

   客户端（通常是浏览器）先向服务器发出加密通信的请求，这被叫做 ClientHello请求

2. 服务器回应（SeverHello）

   服务器收到客户端请求后，向客户端发出回应，这叫做SeverHello

3. 客户端回应

   客户端收到服务器回应以后，首先验证服务器证书。 **如果证书不是可信机构颁布、或者证书中的域名与实际域名不一致、或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信**

4. 服务器的最后回应

   服务器收到客户端的第三个随机数pre-master key之后，计算生成本次会话所用的"会话密钥"  



参考
-------------
* `SSL/TLS协议运行机制的概述 <http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html>`_
* `理解 HTTPS 协议 <https://www.oschina.net/translate/understanding-https-protocol>`_
* `HTTPS 详解 <http://honglu.me/2016/01/13/HTTPS%E8%AF%A6%E8%A7%A3/>`_
* `HTTPS那些事（一）HTTPS原理 <http://www.guokr.com/post/114121/>`_



