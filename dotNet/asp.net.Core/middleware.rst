中间件
=============

.. contents:: Sections:
   :local:
   :depth: 2


中间件的概念
------------------

**中间件** 是用于组成应用程序管道来处理请求和响应的组件.

中间件的作用
"""""""""""""""
管道内的每一个组件都可以选择是否将请求交给下一个组件、并在管道中调用下一个组件之前和之后执行某些操作.


请求委托与请求管道
"""""""""""""""""""

**请求委托** 被用来建立 **请求管道** ， **请求委托** 处理每一个 HTTP 请求

**请求委托** 通过使用 ``IApplicationBuilder`` 类型的 ``Run`` 、``Map`` 以及 ``Use`` 扩展方法来配置，并在 ``Startup`` 类中传给 ``Configure`` 方法.

每个单独的 **请求委托** 都可以被指定为一个内嵌匿名方法，或其定义在一个可重用的类中 ==> **中间件** 或 **中间件组件**.

每个位于 **请求管道** 内的中间件组件负责调用管道中下一个组件，或适时短路调用链

用 IApplicationBuilder 创建中间件管道
------------------------------------------

ASP.NET 请求管道由一系列的请求委托所构成，它们一个接着一个被调用.

.. image:: http://images2015.cnblogs.com/blog/959753/201607/959753-20160719115014654-1926040899.png
   :width: 400
   :height: 250

请求管道的短路
""""""""""""""""

任何委托都能选择停止传递到下一个委托，转而自己处理该请求.

.. note::
   一个授权（ ``authorization`` ）中间件只有在通过身份验证之后才调用下一个委托，否则它就会被短路并返回 “Not Authorized” 的响应


.. warning::
   应当避免在修改了 ``HttpResponse`` 之后还调用管道内下一个会修改响应的组件，从而导致它被送到客户端处
   
Run，Map 与 Use
---------------------

可以使用 ``Run`` 、``Map`` 和 ```Use`` 配置 HTTP 管道.

Run
"""""""""""

- ``Run`` 方法将会短路管道（因为它不会调用 ``next`` 请求委托）   

- ``Run`` 应该只能在你的 **管道尾部** 被调用 

- ``Run`` 是一种惯例，有些中间件组件可能会暴露他们自己的 ``Run[Middleware]`` 方法，而这些方法只能在管道末尾处运行.

.. note::
   ``IApplicationBuilder`` 接口向外暴露了一个 ``Use`` 方法，因此从技术上来说它们并不完全是 *扩展 方法*

Map
""""""""""""""

约定了 ``Map*`` 扩展被用于 **分支管道**.

当前的实现已支持基于请求路径或使用谓词来进入分支.

``Map`` 扩展方法用于匹配基于请求路径的请求委托。 ``Map`` 只接受路径，并配置单独的中间件管道的功能.

``Map`` 只接受路径，并配置单独的中间件管道的功能.

.. note::
   当使用了 ``Map`` ，每个请求所匹配的路径段将从 ``HttpRequest.Path`` 中移除，并附加到 ``HttpRequest.PathBase`` 中。

除基于路径的映射外， ``MapWhen`` 方法还支持 **基于谓词的中间件分支** ，允许以非常灵活的方式构建单独的管道。

任何 ``Func<HttpContext, bool>`` 类型的谓语都被用于将请求映射到新的管到分支



内置中间件
---------------

.. list-table:: 中间件
  :header-rows: 1

  *  - 中间件
     - 描述
  *  - :doc:`身份验证（Authentication） </security/authentication/index>`
     - 提供身份验证支持。
  *  - :doc:`跨域资源共享（CORS） </security/cors>`
     - 配置跨域资源共享。CORS 全称为 Cross-Origin Resource Sharing。
  *  - :doc:`路由（Routing） <routing>`
     - 定义和约定请求路由。
  *  - :ref:`会话（Session） <session>`
     - 提供对管理用户会话（session）的支持。
  *  - :doc:`静态文件 <static-files>`
     - 提供对静态文件服务于目录浏览的支持。

.. _middleware-writing-middleware:


编写中间件 
------------

对于更复杂的请求处理功能，ASP.NET 团队推荐在他们自己的类中实现中间件，并暴露 ``IApplicationBuilder`` 扩展方法，这样就能通过 ``Configure`` 方法来被调用。

中间件类（middleware class）
"""""""""""""""""""""""""""""""

只要在其构造函数中获得下一个 ``RequestDelegate`` 并提供一个 ``Invoke`` 方法

中间件遵循 **显式依赖原则** 并在其构造函数中暴露所有依赖项。
- 中间件能够利用到 ``UseMiddleware`` 扩展方法的优势，直接通过它们的构造函数注入服务.

通过使用扩展方法和相关中间件类，``Configure`` 方法变得非常 **简洁** 和 **高可读性**